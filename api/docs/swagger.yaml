definitions:
  api.StandartError:
    properties:
      error:
        type: string
    type: object
  models.Task:
    properties:
      description:
        type: string
      id:
        type: integer
      status:
        type: string
      title:
        type: string
    type: object
info:
  contact: {}
  description: This swagger UI was created in lesson
  title: 'Project: Swagger Intro'
  version: "1.0"
paths:
  /tasks:
    get:
      consumes:
      - application/json
      description: Retrieves all tasks from the database
      parameters:
      - description: ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of tasks
          schema:
            items:
              $ref: '#/definitions/models.Task'
            type: array
        "500":
          description: Error while getting tasks
          schema:
            $ref: '#/definitions/api.StandartError'
      security:
      - BearerAuth: []
      summary: Retrieve all tasks
      tags:
      - Task
    post:
      consumes:
      - application/json
      description: Create a new task with provided JSON payload
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Task object to be created
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Task'
      produces:
      - application/json
      responses:
        "201":
          description: Task created successfully
          schema:
            type: string
        "400":
          description: Invalid data
          schema:
            $ref: '#/definitions/api.StandartError'
        "500":
          description: Error while creating tasks
          schema:
            $ref: '#/definitions/api.StandartError'
      security:
      - BearerAuth: []
      summary: Create a new task
      tags:
      - Task
  /tasks/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a task from the database by its ID
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Task deleted successfully
          schema:
            type: string
        "500":
          description: Request denied
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete a task
      tags:
      - Task
    get:
      consumes:
      - application/json
      description: Retrieves a task from the database by its ID
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Task details
          schema:
            $ref: '#/definitions/models.Task'
        "400":
          description: Task does not exist
          schema:
            type: string
      summary: Retrieve a task by ID
      tags:
      - Task
    put:
      consumes:
      - application/json
      description: Updates a task in the database
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated task object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Task'
      produces:
      - application/json
      responses:
        "200":
          description: Updated task details
          schema:
            $ref: '#/definitions/models.Task'
        "400":
          description: Invalid request
          schema:
            type: string
        "500":
          description: Request denied
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update a task
      tags:
      - Task
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
